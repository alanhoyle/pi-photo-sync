#!/bin/bash
set -uo pipefail
IFS=$'\n\t'

if [ -e /sys/devices/platform/leds/leds/PWR ]; then
    RED_LED=/sys/devices/platform/leds/leds/PWR
    GREEN_LED=/sys/devices/platform/leds/leds/ACT
else
    RED_LED=/sys/devices/platform/leds/leds/led1
    GREEN_LED=/sys/devices/platform/leds/leds/led0
fi

if [ -e /etc/piphoto.conf ] ; then
    source /etc/piphoto.conf
else
    >&2 echo "Could not read configuration file. Please update /etc/piphoto.conf"
    exit 1
fi

# led 0 - green, led 1 - red
function indicate_error {
    # Turn off the green led and flash the red indicating an error
    echo 'none' | sudo tee ${GREEN_LED}/trigger > /dev/null
    echo 0 | sudo tee ${GREEN_LED}/brightness > /dev/null
    echo timer | sudo tee ${RED_LED}/trigger > /dev/null
    >&2 echo "Sync command exited with non-zero status!"
}

function indicate_success {
    # Set the green led to solid to indicate success
    echo 'default-on' | sudo tee ${GREEN_LED}/trigger > /dev/null
    echo "Sync completed successfully"
}

# Start blinking the green led
echo timer | sudo tee ${GREEN_LED}/trigger > /dev/null

# Indicate error status if the script is interrupted
function interrupted {
    >&2 "piphoto interrupted, exiting..."
    indicate_error
    exit 1
}
trap interrupted SIGINT SIGTERM

if [ -z "${run_as_user:-}" ]; then
    >&2 echo "run_as_user not set in config."
    exit 1
fi

if [ -z "${sync_command:-}" ]; then
    >&2 echo "sync_command not set in config."
    exit 1
fi

# Run the sync
set +e
su - "$run_as_user" -c "$sync_command"
sync_status=$?
set -e

if [ $sync_status -eq 0 ] ; then
    indicate_success
else
    indicate_error
fi
