#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

function show_usage {
    echo "Usage: $(basename "$0") [Options] directory"
    echo "  -d host            The destination host to sync to"
    echo "  -p path            The remote path"
    echo "  -h                 Show this help"
}

if [ -e /etc/piphoto.ssh.conf ] ; then
    source /etc/piphoto.ssh.conf
fi

while getopts "h?d:p:" opt; do
    case "$opt" in
    h|\?)
        show_usage
        exit 0
        ;;
    d)  dest_host="$OPTARG"
        ;;
    p)  dest_path="$OPTARG"
        ;;
    esac
done

shift $((OPTIND-1)); OPTIND=1

if [ -z "${dest_host:-}" ]; then
    >&2 echo "dest_host not set. Use -d or set it in /etc/piphoto.ssh.conf"
    exit 1
fi

if [ -z "${dest_path:-}" ]; then
    >&2 echo "dest_path not set. Use -p or set it in /etc/piphoto.ssh.conf"
    exit 1
fi

mount_point=${1:-}
if [ -z "$mount_point" ]; then
    >&2 echo "ERROR: No directory provided!"
    show_usage
    exit 1
fi


# Ssh into the remote host in master mode
ssh -nNfM "$dest_host"

# Iterate over the the images in the directory
LAST_CREATED=""
while IFS= read -r -d '' file; do
    echo "Processing $file"

    # Extract the date it was taken
    date=$(exiftool -T -createdate -d  "%Y-%m-%d" "$file" || true)
    year=$(date --date="$date" "+%Y" || true)
    remote_path="$dest_path/$year/$date/"

    if [ -z "$date" ] || [ -z "$year" ] || [ "$date" == "-" ] ; then
        >&2 echo "Could not infer date from file \"$file\""
    else
        # Create a remote directory if we think we need to
        if [ "$LAST_CREATED" != "$remote_path" ]; then
            echo "Creating remote path $remote_path"
            ssh "$dest_host" "mkdir -p $remote_path" < /dev/null
            LAST_CREATED="$remote_path"
        fi

        # Copy the file to the remote directory
        copied=0 
        rsync -a -e ssh "$file" "$dest_host":"$remote_path" || copied=$?
        if [ "$copied" -ne 0 ] ; then
            >&2 echo "Could not copy $file to $dest_host:$remote_path"
        else
            echo "Copied $file to $dest_host:$remote_path"
        fi
    
    fi

done< <(find "$mount_point" -type f -print0)

# Terminate the ssh connection

ssh -O exit "$dest_host"
